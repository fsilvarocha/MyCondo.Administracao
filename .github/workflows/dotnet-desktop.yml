name: .NET Core Desktop

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest

    env:
      Solution_Name: MyCondo.Administracao.sln                  # Nome da sua solução.
      Test_Project_Path: tests/MyCondo.Administracao.Tests/MyCondo.Administracao.Tests.csproj # Caminho real do seu projeto de teste.
      Wap_Project_Directory: src/MyCondo.Administracao.Package   # Caminho real do diretório Wap.
      Wap_Project_Path: src/MyCondo.Administracao.Package/MyCondo.Administracao.Package.wapproj # Caminho real do arquivo de projeto Wap.

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Instalar o .NET Core
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Adicionar MSBuild ao PATH
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    # Executar todos os testes unitários
    - name: Execute unit tests
      run: dotnet test

    # Restaurar a aplicação
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Criar o pacote do aplicativo
    - name: Create the app package
      run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x86|x64
        Appx_Package_Build_Mode: StoreUpload
        Configuration: ${{ matrix.configuration }}

    # Fazer upload dos artefatos de build
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: MSIX Package
        path: ${{ env.Wap_Project_Directory }}\AppPackages
